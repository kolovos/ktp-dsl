[%import "ktp.eol";%]
[%var project = Project.all.first();%]
<html>
<head>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
	<style>
	a {
		text-decoration: none;
		color: black;
	}
	</style>
</head>
<h1>Risk Statement</h1>
<table class="table table-bordered">
	<tr style="background-color:#F2F2F2">
		<th>Risk Description</th>
		<th>Impact Description</th>
		<th>Impact Level 1-5</th>
		<th>Prob Level 1-5</th>
		<th>Risk Score 1-25</th>
		<th>Mitigation</th>
		<th>Owner: Business Partner (BP) | Knowledge Base (KB)</th>
	</tr>
	[%for (r in Risk.all) { %]
	<tr>
		<td>[%=r.link(r.title)%]</td>
		<td>[%=r.description%]</td>
		<td>[%=r.impact%]</td>
		<td>[%=r.probability%]</td>
		<td style="background-color:[%=r.getColor()%]">[%=r.getScore()%]</td>
		<td>[%=r.mitigation%]</td>
		<td>[%=r.owner%]</td>
	</tr>
	[%}%]
</table>

<h1>Work Plan Table</h1>
<table class="table table-bordered">
<tr style="background-color:#B7C6E4">
	<th>Task No.</th>
	<th>Task description</th>
	<th>Efforts (months)</th>
	<th>Location</th>
	<th>Outputs (O) & key decision points (DP)</th>
</tr>
[%for (s in Stage.all){%]
<tr>
	<td colspan="5" style="background-color:#B7C6E4"><center><b>[%=s.link(s.getTitle())%]</b></center></td>
</tr>
[%if (loopCount > 1){%]
<tr>
	<td colspan="5" style="background-color:#CAD9EF"><center><b>Stage Description:</b> [%=s.description%]</center></td>
</tr>
[%}%]
[%for (t in s.tasks) { %]
	<tr>
		<td>[%=t.getId()%]</td>
		<td>[%=t.link("<b>" + t.title + "</b>")%][%if (t.description.isDefined()){%]<br><br><b>Description:</b> [%=t.description%][%}%]</td>
		<td>[%=t.duration%]</td>
		<td>[%=t.location%]</td>
		<td>
		[%for (o in t.outputs){%]
		[%if(o.isTypeOf(Deliverable) or o.isTypeOf(DecisionPoint)){%]
		<b>[%=o.getId()%] [%=o.title%]</b> [%if (o.description.isDefined()){%]<br><br> [%=o.description%][%}%]
		[%}else{%]
		[%=o.description%]
		[%}%]
		<br><br>
		[%}%]
		</td>
	</tr>
[%}%]
	<tr>
		<td></td>
		<td style="text-align:right"><b>Total duration in months</b></td>
		<td>[%=s.tasks.duration.sum()%]</td>
		<td></td>
		<td></td>
	</tr>
[%}%]
<tr>
	<td colspan="5" style="background-color:black">
	</td>
</tr>
<tr>
	<td></td>
	<td style="text-align:right;color:red"><b>Sum of total effort in months (tasks + stages)</b></td>
	<td>[%=Task.all.duration.sum()%]</td>
	<td></td>
	<td></td>
</tr>
</table>

<h1>Time Plan</h1>
<table class="table table-bordered">
	<tr>
		<th rowspan="2">Project task or stage</th>
		<th style="text-align:center" colspan="[%=project.duration/3%]">Project months</th>
	</tr>
	<tr>
		[%for (i in 0.to(project.duration/3 - 1)){%]
			<td>[%=i*3%] to [%=i*3+3%]</td>
		[%}%]
	</tr>
	[%for (t in Task.all) { %]
	<tr>
		<td>[%=t.getId()%] [%=t.link(t.title)%]</td>
		[%for (i in 0.to(project.duration/3 - 1)){%]
			<td [%if (t.runsBetween(i*3, i*3+3)){%]style="background-color:#CAD9EF"[%}%]>[%=t.getOutputs(i*3, i*3+3).collect(o|o.getId()).concat(", ")%]</td>
		[%}%]
	</tr>
	[%}%]
	
</table>
</html>

[%

operation Stage getId() {
	return self.eContainer().eContents.indexOf(self);
}

operation DecisionPoint getId() {
	return "DP" + self.eContainer().getId();
}

operation Deliverable getId() {
	return "O" + self.eContainer().getId();
}

operation Stage getTitle() {
	var index = self.eContainer().eContents.indexOf(self);
	if (index > 0) {
		return "Project stage " + index + " - " + self.title;
	}
	else {
		return "Pre-Stage - " + self.title;
	}
}

operation Task getId() {
	if (self.eContainer().getId() == 0) {
		return "T" + (self.eContainer().eContents.indexOf(self) + 1);
	}
	else {
		return self.eContainer().getId() + "." + (self.eContainer().eContents.indexOf(self) + 1);
	}
}

operation Risk getScore() {
	return self.impact * self.probability;
}

operation Risk getColor() {
	var score = self.getScore();
	if (score <= 5) return "#CADFB7";
	else if (score <= 12) return "#FFFF54";
	else if (score <= 20) return "#EA9A56";
	else return "#E13422";
}

operation Task runsBetween(start: Real, end: Real) {
	return
		(self.getStart() <= start and self.getEnd() >= start and self.getEnd() <= end) or
		(self.getStart() >= start and self.getEnd() <= end) or
		(self.getStart() >= start and self.getStart() <= end and self.getEnd() >= end) or
		(self.getStart() <= start and self.getEnd() >= end);
}

operation Task getOutputs(start: Integer, end: Integer) {
	if (self.runsBetween(start, end) and not self.runsBetween(end+0.1, end+1)) {
		return self.outputs.select(o|not o.isTypeOf(Output));
	}
	else return Sequence{};
}

%]